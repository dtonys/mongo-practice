'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _mongomem = require('mongomem');

var _test_helper = require('../test_helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_ava2.default.before('start server', function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(t) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _mongomem.MongoDBServer.start();

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava2.default.beforeEach('create mongoose connection', function () {
  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(t) {
    var db;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _test_helper.createMongoose)();

          case 2:
            db = _context2.sent;

            t.context.db = db;

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

(0, _ava2.default)('query user via `find` and `findOne`', function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(t) {
    var db, User, NEW_USER_NAME, joe, users, user;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            db = t.context.db;
            User = db.models['user'];


            console.log('db.collections');
            console.log(db.collections);

            console.log('db');
            console.log(db);

            console.log('db');
            console.log(db);

            _context3.next = 10;
            return db.connection.collections.users.drop();

          case 10:
            NEW_USER_NAME = 'Joe';
            joe = new User({ name: NEW_USER_NAME });
            _context3.next = 14;
            return joe.save();

          case 14:
            _context3.next = 16;
            return User.find({ name: NEW_USER_NAME });

          case 16:
            users = _context3.sent;


            t.is(users[0]._id.toString(), joe._id.toString(), 'the id of the created object is same as the queried one');

            _context3.next = 20;
            return User.findOne({ _id: joe._id });

          case 20:
            user = _context3.sent;

            t.is(user.name, NEW_USER_NAME, 'the name of the created object is same as the queried one');

          case 22:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());
//# sourceMappingURL=../../node_modules/.cache/ava/7fda3c940a40efe1ea32e7b051134b05.js.map