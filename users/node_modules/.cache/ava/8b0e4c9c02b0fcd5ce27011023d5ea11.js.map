{"version":3,"sources":["delete_test.js"],"names":["assert","createUser","user_1","name","save","connection","collections","users","drop","newUser","queriedUser","comment","remove","findOne","equals","findOneAndRemove","findByIdAndRemove","_id","true","end"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,yBAAK,iBAAL,EAAwB,MAAOA,MAAP,IAAkB;AACxC,WAASC,UAAT,GAAsB;AACpB,UAAMC,SAAS,mBAAS;AACtBC,YAAM;AADgB,KAAT,CAAf;AAGA,WAAOD,OAAOE,IAAP,EAAP;AACD;;AAED,QAAM,mBAASC,UAAT,CAAoBC,WAApB,CAAgCC,KAAhC,CAAsCC,IAAtC,EAAN;;AAEA,MAAIC,UAAU,IAAd;AACA,MAAIC,cAAc,IAAlB;;AAEAV,SAAOW,OAAP,CAAe,yBAAf;AACAF,YAAU,MAAMR,YAAhB;AACA,QAAMQ,QAAQG,MAAR,EAAN;AACAF,gBAAc,MAAM,eAAKG,OAAL,CAAa,EAAEV,MAAM,SAAR,EAAb,CAApB;AACAH,SAAOc,MAAP,CAAeJ,WAAf,EAA4B,IAA5B,EAAkC,uCAAlC;;AAEAV,SAAOW,OAAP,CAAe,uBAAf;AACA,QAAMV,YAAN;AACA,QAAM,eAAKW,MAAL,CAAY,EAAET,MAAM,SAAR,EAAZ,CAAN;AACAO,gBAAc,MAAM,eAAKG,OAAL,CAAa,EAAEV,MAAM,SAAR,EAAb,CAApB;AACAH,SAAOc,MAAP,CAAeJ,WAAf,EAA4B,IAA5B,EAAkC,uCAAlC;;AAEAV,SAAOW,OAAP,CAAe,iCAAf;AACA,QAAMV,YAAN;AACA,QAAM,eAAKc,gBAAL,CAAsB,EAAEZ,MAAM,SAAR,EAAtB,CAAN;AACAO,gBAAc,MAAM,eAAKG,OAAL,CAAa,EAAEV,MAAM,SAAR,EAAb,CAApB;AACAH,SAAOc,MAAP,CAAeJ,WAAf,EAA4B,IAA5B,EAAkC,uCAAlC;;AAEAV,SAAOW,OAAP,CAAe,kCAAf;AACAF,YAAU,MAAMR,YAAhB;AACA,QAAM,eAAKe,iBAAL,CAAuBP,QAAQQ,GAA/B,CAAN;AACAP,gBAAc,MAAM,eAAKG,OAAL,CAAa,EAAEV,MAAM,SAAR,EAAb,CAApB;AACAH,SAAOc,MAAP,CAAeJ,WAAf,EAA4B,IAA5B,EAAkC,uCAAlC;;AAEAV,SAAOkB,IAAP,CAAa,IAAb,EAAmB,gBAAnB;AACAlB,SAAOmB,GAAP;AACD,CAvCD","file":"delete_test.js","sourcesContent":["import test from 'tape-async';\nimport mongoose from 'mongoose';\nimport User from '../src/user';\n\ntest('Deleting a user', async (assert) => {\n  function createUser() {\n    const user_1 = new User({\n      name: 'newUser',\n    });\n    return user_1.save();\n  }\n\n  await mongoose.connection.collections.users.drop();\n\n  let newUser = null;\n  let queriedUser = null;\n\n  assert.comment('model instance `remove`');\n  newUser = await createUser();\n  await newUser.remove();\n  queriedUser = await User.findOne({ name: 'newUser' })\n  assert.equals( queriedUser, null, 'user should be null after deleting it' );\n\n  assert.comment('class method `remove`');\n  await createUser();\n  await User.remove({ name: 'newUser' });\n  queriedUser = await User.findOne({ name: 'newUser' })\n  assert.equals( queriedUser, null, 'user should be null after deleting it' );\n\n  assert.comment('class method `findOneAndRemove`');\n  await createUser();\n  await User.findOneAndRemove({ name: 'newUser' });\n  queriedUser = await User.findOne({ name: 'newUser' })\n  assert.equals( queriedUser, null, 'user should be null after deleting it' );\n\n  assert.comment('class method `findByIdAndRemove`');\n  newUser = await createUser();\n  await User.findByIdAndRemove(newUser._id);\n  queriedUser = await User.findOne({ name: 'newUser' })\n  assert.equals( queriedUser, null, 'user should be null after deleting it' );\n\n  assert.true( true, 'true is truthy' );\n  assert.end();\n});"]}