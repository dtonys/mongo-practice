{"version":3,"sources":["read_test.js"],"names":["before","t","after","always","beforeEach","alex","name","joe","maria","zach","context","Promise","all","save","serial","find","users","is","_id","toString","findOne","user","skip","limit","allUsers","length"],"mappings":"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","file":"read_test.js","sourcesContent":["import test from 'ava';\nimport mongoose from 'mongoose';\nimport {\n  mongooseConnect,\n  mongooseDisconnect,\n  mongooseDropTestCollections,\n} from '../test_helper';\nimport User from '../../src/user';\n\n\ntest.before('connect to database', async (t) => {\n  await mongooseConnect('users_test');\n});\n\ntest.after.always('disconnect from database', async () => {\n  await mongooseDisconnect();\n});\n\ntest.beforeEach('drop test tables, create users', async (t) => {\n  await mongooseDropTestCollections();\n  const alex = new User({ name: 'Alex' });\n  const joe = new User({ name: 'Joe' });\n  const maria = new User({ name: 'Maria' });\n  const zach = new User({ name: 'Zach' });\n  t.context.alex = alex;\n  t.context.joe = joe;\n  t.context.maria = maria;\n  t.context.zach = zach;\n  await Promise.all([\n    alex.save(),\n    joe.save(),\n    maria.save(),\n    zach.save(),\n  ]);\n});\n\ntest.serial('query user via `find`', async (t) => {\n  const { joe } = t.context;\n  const users = await User.find({ name: 'Joe' });\n\n  t.is(\n    users[0]._id.toString(),\n    joe._id.toString(),\n    'the id of the created object is same as the one queried'\n  );\n\n});\n\ntest.serial('query user via `findOne`', async (t) => {\n  const { joe } = t.context;\n  const user = await User.findOne({ _id: joe._id });\n  t.is( user.name, 'Joe', 'Joe user should have the name Joe' )\n});\n\ntest.serial('`skip` and `limit` the result set', async (t) => {\n  const allUsers = await User.find({}).skip(1).limit(2);\n  t.is(allUsers[0].name, 'Joe', 'the correct first user was set based on the `skip` param');\n  t.is(allUsers[1].name, 'Maria', 'the correct second user was set based on the `skip` param');\n  t.is(allUsers.length, 2, 'the number of results matches the `limit` param');\n});\n\n"]}