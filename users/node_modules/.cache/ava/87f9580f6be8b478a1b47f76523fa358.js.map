{"version":3,"sources":["update_test.js"],"names":["assert","createUser","user_1","name","save","assertName","allUsers","find","equals","length","newUser","queriedUser","comment","connection","collections","users","drop","update","set","findOneAndUpdate","findByIdAndUpdate","_id","true","end"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,yBAAK,iBAAL,EAAwB,MAAOA,MAAP,IAAkB;AACxC,WAASC,UAAT,GAAsB;AACpB,UAAMC,SAAS,mBAAS;AACtBC,YAAM;AADgB,KAAT,CAAf;AAGA,WAAOD,OAAOE,IAAP,EAAP;AACD;;AAED,iBAAeC,UAAf,GAA4B;AAC1BC,eAAW,MAAM,eAAKC,IAAL,CAAU,EAAV,CAAjB;AACAP,WAAOQ,MAAP,CAAcF,SAASG,MAAvB,EAA+B,CAA/B,EAAkC,sCAAlC;AACAT,WAAOQ,MAAP,CAAcF,SAAS,CAAT,EAAYH,IAA1B,EAAgC,MAAhC,EAAwC,sCAAxC;AACA,WAAO,IAAP;AACD;;AAED,MAAIO,UAAU,IAAd;AACA,MAAIC,cAAc,IAAlB;AACA,MAAIL,WAAW,IAAf;;AAEAN,SAAOY,OAAP,CAAe,6BAAf;AACA,QAAM,mBAASC,UAAT,CAAoBC,WAApB,CAAgCC,KAAhC,CAAsCC,IAAtC,EAAN;AACAN,YAAU,MAAMT,YAAhB;AACA,QAAMS,QAAQO,MAAR,CAAe,EAAEd,MAAM,MAAR,EAAf,CAAN;AACA,QAAME,YAAN;;AAEAL,SAAOY,OAAP,CAAe,iCAAf;AACA,QAAM,mBAASC,UAAT,CAAoBC,WAApB,CAAgCC,KAAhC,CAAsCC,IAAtC,EAAN;AACAN,YAAU,MAAMT,YAAhB;AACAS,UAAQQ,GAAR,CAAY,MAAZ,EAAoB,MAApB;AACA,QAAMR,QAAQN,IAAR,EAAN;AACA,QAAMC,YAAN;;AAEAL,SAAOY,OAAP,CAAe,sBAAf;AACA,QAAM,mBAASC,UAAT,CAAoBC,WAApB,CAAgCC,KAAhC,CAAsCC,IAAtC,EAAN;AACAN,YAAU,MAAMT,YAAhB;AACA,QAAM,eAAKgB,MAAL,CAAY,EAAEd,MAAM,SAAR,EAAZ,EAAiC,EAAEA,MAAM,MAAR,EAAjC,CAAN;AACA,QAAME,YAAN;;AAEAL,SAAOY,OAAP,CAAe,gCAAf;AACA,QAAM,mBAASC,UAAT,CAAoBC,WAApB,CAAgCC,KAAhC,CAAsCC,IAAtC,EAAN;AACAN,YAAU,MAAMT,YAAhB;AACA,QAAM,eAAKkB,gBAAL,CAAsB,EAAEhB,MAAM,SAAR,EAAtB,EAA2C,EAAEA,MAAM,MAAR,EAA3C,CAAN;AACA,QAAME,YAAN;;AAEAL,SAAOY,OAAP,CAAe,iCAAf;AACA,QAAM,mBAASC,UAAT,CAAoBC,WAApB,CAAgCC,KAAhC,CAAsCC,IAAtC,EAAN;AACAN,YAAU,MAAMT,YAAhB;AACA,QAAM,eAAKmB,iBAAL,CAAuBV,QAAQW,GAA/B,EAAoC,EAAElB,MAAM,MAAR,EAApC,CAAN;AACA,QAAME,YAAN;;AAGAL,SAAOsB,IAAP,CAAa,IAAb,EAAmB,gBAAnB;AACAtB,SAAOuB,GAAP;AACD,CArDD","file":"update_test.js","sourcesContent":["import test from 'tape-async';\nimport mongoose from 'mongoose';\nimport User from '../src/user';\n\ntest('Updating a user', async (assert) => {\n  function createUser() {\n    const user_1 = new User({\n      name: 'newUser',\n    });\n    return user_1.save();\n  }\n\n  async function assertName() {\n    allUsers = await User.find({});\n    assert.equals(allUsers.length, 1, 'only one user exists in the database');\n    assert.equals(allUsers[0].name, 'Alex', 'the user\\'s name is the updated name');\n    return true;\n  }\n\n  let newUser = null;\n  let queriedUser = null;\n  let allUsers = null;\n\n  assert.comment('model instance via `update`');\n  await mongoose.connection.collections.users.drop();\n  newUser = await createUser();\n  await newUser.update({ name: 'Alex' });\n  await assertName();\n\n  assert.comment('model instance `set` and `save`');\n  await mongoose.connection.collections.users.drop();\n  newUser = await createUser();\n  newUser.set('name', 'Alex');\n  await newUser.save();\n  await assertName();\n\n  assert.comment('model class `update`');\n  await mongoose.connection.collections.users.drop();\n  newUser = await createUser();\n  await User.update({ name: 'newUser' }, { name: 'Alex' });\n  await assertName();\n\n  assert.comment('model class `findOneAndUpdate`');\n  await mongoose.connection.collections.users.drop();\n  newUser = await createUser();\n  await User.findOneAndUpdate({ name: 'newUser' }, { name: 'Alex' });\n  await assertName();\n\n  assert.comment('model class `findByIdAndUpdate`');\n  await mongoose.connection.collections.users.drop();\n  newUser = await createUser();\n  await User.findByIdAndUpdate(newUser._id, { name: 'Alex' });\n  await assertName();\n\n\n  assert.true( true, 'true is truthy' );\n  assert.end();\n});\n"]}