{"version":3,"sources":["read_test.js"],"names":["before","t","after","always","beforeEach","alex","name","joe","maria","zach","Promise","all","save","serial","find","users","is","_id","toString","findOne","user","pass"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AAKA;;;;;;;;AAGA,cAAKA,MAAL,CAAY,qBAAZ;AAAA,uDAAmC,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3B,kCAAgB,YAAhB,CAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAIA,cAAKC,KAAL,CAAWC,MAAX,CAAkB,0BAAlB,4CAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACtC,sCADsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9C;;AAIA,cAAKC,UAAL,CAAgB,gCAAhB,4CAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC1C,+CAD0C;;AAAA;AAE1CC,cAF0C,GAEnC,mBAAS,EAAEC,MAAM,MAAR,EAAT,CAFmC;AAG1CC,aAH0C,GAGpC,mBAAS,EAAED,MAAM,KAAR,EAAT,CAHoC;AAI1CE,eAJ0C,GAIlC,mBAAS,EAAEF,MAAM,OAAR,EAAT,CAJkC;AAK1CG,cAL0C,GAKnC,mBAAS,EAAEH,MAAM,MAAR,EAAT,CALmC;AAAA;AAAA,iBAM1CI,QAAQC,GAAR,CAAY,CAChBN,KAAKO,IAAL,EADgB,EAEhBL,IAAIK,IAAJ,EAFgB,EAGhBJ,MAAMI,IAAN,EAHgB,EAIhBH,KAAKG,IAAL,EAJgB,CAAZ,CAN0C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlD;;AAcA,cAAKC,MAAL,CAAY,uBAAZ;AAAA,wDAAqC,kBAAOZ,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BM,eAD6B,GACvB,mBAAS,EAAED,MAAM,KAAR,EAAT,CADuB;AAAA;AAAA,mBAE7BC,IAAIK,IAAJ,EAF6B;;AAAA;AAAA;AAAA,mBAIf,eAAKE,IAAL,CAAU,EAAER,MAAM,KAAR,EAAV,CAJe;;AAAA;AAI7BS,iBAJ6B;;;AAMnCd,cAAEe,EAAF,CACED,MAAM,CAAN,EAASE,GAAT,CAAaC,QAAb,EADF,EAEEX,IAAIU,GAAJ,CAAQC,QAAR,EAFF,EAGE,yDAHF;;AANmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAcA,cAAKL,MAAL,CAAY,0BAAZ;AAAA,wDAAwC,kBAAOZ,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChCM,eADgC,GAC1B,mBAAS,EAAED,MAAM,KAAR,EAAT,CAD0B;AAAA;AAAA,mBAEhCC,IAAIK,IAAJ,EAFgC;;AAAA;AAAA;AAAA,mBAGnB,eAAKO,OAAL,CAAa,EAAEF,KAAKV,IAAIU,GAAX,EAAb,CAHmB;;AAAA;AAGhCG,gBAHgC;;AAItCnB,cAAEe,EAAF,CAAMI,KAAKd,IAAX,EAAiB,KAAjB,EAAwB,mCAAxB;;AAJsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA;;AAOA,cAAKO,MAAL,CAAY,mCAAZ;AAAA,wDAAiD,kBAAOZ,CAAP;AAAA;AAAA;AAAA;AAAA;;AAE/CA,cAAEoB,IAAF;;AAF+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjD;;AAAA;AAAA;AAAA;AAAA","file":"read_test.js","sourcesContent":["import test from 'ava';\nimport mongoose from 'mongoose';\nimport {\n  mongooseConnect,\n  mongooseDisconnect,\n  mongooseDropTestCollections,\n} from '../test_helper';\nimport User from '../../src/user';\n\n\ntest.before('connect to database', async (t) => {\n  await mongooseConnect('users_test');\n});\n\ntest.after.always('disconnect from database', async () => {\n  await mongooseDisconnect();\n});\n\ntest.beforeEach('drop test tables, create users', async () => {\n  await mongooseDropTestCollections();\n  const alex = new User({ name: 'Alex' });\n  const joe = new User({ name: 'Joe' });\n  const maria = new User({ name: 'Maria' });\n  const zach = new User({ name: 'Zach' });\n  await Promise.all([\n    alex.save(),\n    joe.save(),\n    maria.save(),\n    zach.save(),\n  ]);\n});\n\ntest.serial('query user via `find`', async (t) => {\n  const joe = new User({ name: 'Joe' });\n  await joe.save();\n\n  const users = await User.find({ name: 'Joe' });\n\n  t.is(\n    users[0]._id.toString(),\n    joe._id.toString(),\n    'the id of the created object is same as the one queried'\n  );\n\n});\n\ntest.serial('query user via `findOne`', async (t) => {\n  const joe = new User({ name: 'Joe' });\n  await joe.save();\n  const user = await User.findOne({ _id: joe._id });\n  t.is( user.name, 'Joe', 'Joe user should have the name Joe' )\n});\n\ntest.serial('`skip` and `limit` the result set', async (t) => {\n\n  t.pass();\n});\n\n"]}