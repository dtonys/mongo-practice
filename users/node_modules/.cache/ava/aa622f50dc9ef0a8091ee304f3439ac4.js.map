{"version":3,"sources":["association_test.js"],"names":["before","t","after","always","beforeEach","joe","name","blogPost","title","content","comment","blogPosts","push","comments","user","context","Promise","all","save","serial","findOne","populate","is","pass","path","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAOA,cAAKA,MAAL,CAAY,qBAAZ;AAAA,uDAAmC,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3B,kCAAgB,YAAhB,CAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAIA,cAAKC,KAAL,CAAWC,MAAX,CAAkB,0BAAlB,4CAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACtC,sCADsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9C;;AAIA,cAAKC,UAAL,CAAgB,0CAAhB;AAAA,wDAA4D,kBAAOH,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpD,8CADoD;;AAAA;;AAG1D;AACMI,eAJoD,GAI9C,mBAAS;AACnBC,oBAAM;AADa,aAAT,CAJ8C;AAOpDC,oBAPoD,GAOzC,uBAAa;AAC5BC,qBAAO,qBADqB;AAE5BC,uBAAS;AAFmB,aAAb,CAPyC;AAWpDC,mBAXoD,GAW1C,sBAAY;AAC1BD,uBAAS;AADiB,aAAZ,CAX0C;;;AAe1DJ,gBAAIM,SAAJ,CAAcC,IAAd,CAAmBL,QAAnB;AACAA,qBAASM,QAAT,CAAkBD,IAAlB,CAAuBF,OAAvB;AACAA,oBAAQI,IAAR,GAAeT,GAAf;;AAEAJ,cAAEc,OAAF,CAAUV,GAAV,GAAgBA,GAAhB;AACAJ,cAAEc,OAAF,CAAUR,QAAV,GAAqBA,QAArB;AACAN,cAAEc,OAAF,CAAUL,OAAV,GAAoBA,OAApB;;AArB0D;AAAA,mBAuBpDM,QAAQC,GAAR,CAAY,CAChBZ,IAAIa,IAAJ,EADgB,EAEhBX,SAASW,IAAT,EAFgB,EAGhBR,QAAQQ,IAAR,EAHgB,CAAZ,CAvBoD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5D;;AAAA;AAAA;AAAA;AAAA;;AA8BA,cAAKC,MAAL,CAAY,kCAAZ;AAAA,wDAAgD,kBAAOlB,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3B,eAChBmB,OADgB,CACR,EAAEd,MAAM,KAAR,EADQ,EAEhBe,QAFgB,CAEP,WAFO,CAD2B;;AAAA;AACxCP,gBADwC;;AAI9Cb,cAAEqB,EAAF,CAAKR,KAAKH,SAAL,CAAe,CAAf,EAAkBH,KAAvB,EAA8B,qBAA9B,EAAqD,+CAArD;AACAP,cAAEsB,IAAF;;AAL8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhD;;AAAA;AAAA;AAAA;AAAA;;AAQA,cAAKJ,MAAL,CAAY,4BAAZ;AAAA,wDAA0C,kBAAOlB,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACrB,eAChBmB,OADgB,CACR,EAAEd,MAAM,KAAR,EADQ,EAEhBe,QAFgB,CAEP;AACRG,oBAAM,WADE;AAERH,wBAAU;AACRG,sBAAM,UADE;AAERH,0BAAU;AACRG,wBAAM;AADE;AAFF;AAFF,aAFO,CADqB;;AAAA;AAClCV,gBADkC;;AAYxCW,oBAAQC,GAAR,CAAYZ,IAAZ;AACAW,oBAAQC,GAAR,CAAYZ,KAAKH,SAAL,CAAe,CAAf,CAAZ;AACAc,oBAAQC,GAAR,CAAYZ,KAAKH,SAAL,CAAe,CAAf,EAAkBE,QAAlB,CAA2B,CAA3B,CAAZ;AACAZ,cAAEsB,IAAF;;AAfwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1C;;AAAA;AAAA;AAAA;AAAA","file":"association_test.js","sourcesContent":["import test from 'ava';\nimport mongoose from 'mongoose';\nimport User from '../../src/user';\nimport Comment from '../../src/comment';\nimport BlogPost from '../../src/blogPost';\nimport {\n  mongooseConnect,\n  mongooseDisconnect,\n  mongooseDropTestCollection,\n} from '../test_helper';\n\n\ntest.before('connect to database', async (t) => {\n  await mongooseConnect('users_test');\n});\n\ntest.after.always('disconnect from database', async () => {\n  await mongooseDisconnect();\n});\n\ntest.beforeEach('drop test tables and create associations', async (t) => {\n  await mongooseDropTestCollection();\n\n  // create associations\n  const joe = new User({\n    name: 'Joe',\n  });\n  const blogPost = new BlogPost({\n    title: 'test blogPost title',\n    content: 'test blogPost content',\n  });\n  const comment = new Comment({\n    content: 'test Comment content',\n  });\n\n  joe.blogPosts.push(blogPost);\n  blogPost.comments.push(comment);\n  comment.user = joe;\n\n  t.context.joe = joe;\n  t.context.blogPost = blogPost;\n  t.context.comment = comment;\n\n  await Promise.all([\n    joe.save(),\n    blogPost.save(),\n    comment.save(),\n  ]);\n});\n\ntest.serial('get blogpost associated with joe', async (t) => {\n  const user = await User\n    .findOne({ name: 'Joe' })\n    .populate('blogPosts');\n  t.is(user.blogPosts[0].title, 'test blogPost title', 'loaded the associated blogpost via `populate`');\n  t.pass();\n});\n\ntest.serial('save a full relation graph', async (t) => {\n  const user = await User\n    .findOne({ name: 'Joe' })\n    .populate({\n      path: 'blogPosts',\n      populate: {\n        path: 'comments',\n        populate: {\n          path: 'user',\n        }\n      }\n    });\n  console.log(user);\n  console.log(user.blogPosts[0]);\n  console.log(user.blogPosts[0].comments[0]);\n  t.pass();\n});\n\n\n\n\n\n\n\n"]}