{"version":3,"sources":["read_test.js"],"names":["before","t","console","log","after","always","beforeEach","connection","collections","users","drop","serial","joe","name","save","find","is","_id","toString","findOne","user"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAMA,cAAKA,MAAL,CAAY,qBAAZ;AAAA,uDAAmC,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AACjCC,oBAAQC,GAAR,CAAY,gCAAZ;AADiC;AAAA,mBAE3B,kCAAgB,YAAhB,CAF2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAKA,cAAKC,KAAL,CAAWC,MAAX,CAAkB,0BAAlB,4CAA8C;AAAA;AAAA;AAAA;AAAA;AAC5CH,kBAAQC,GAAR,CAAY,qCAAZ;AAD4C;AAAA,iBAEtC,sCAFsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9C;;AAKA,cAAKG,UAAL,CAAgB,kBAAhB;AAAA,wDAAoC,kBAAOL,CAAP;AAAA;AAAA;AAAA;AAAA;AAClCC,oBAAQC,GAAR,CAAY,8BAAZ;AADkC;AAAA,mBAE5B,mBAASI,UAAT,CAAoBC,WAApB,CAAgCC,KAAhC,CAAsCC,IAAtC,EAF4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAKA,cAAKC,MAAL,CAAY,uBAAZ;AAAA,wDAAqC,kBAAOV,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCC,oBAAQC,GAAR,CAAY,kCAAZ;AACMS,eAF6B,GAEvB,mBAAS,EAAEC,MAAM,KAAR,EAAT,CAFuB;AAAA;AAAA,mBAG7BD,IAAIE,IAAJ,EAH6B;;AAAA;AAAA;AAAA,mBAKf,eAAKC,IAAL,CAAU,EAAEF,MAAM,KAAR,EAAV,CALe;;AAAA;AAK7BJ,iBAL6B;;;AAOnCR,cAAEe,EAAF,CACEP,MAAM,CAAN,EAASQ,GAAT,CAAaC,QAAb,EADF,EAEEN,IAAIK,GAAJ,CAAQC,QAAR,EAFF,EAGE,yDAHF;;AAPmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAeA,cAAKP,MAAL,CAAY,0BAAZ;AAAA,wDAAwC,kBAAOV,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCC,oBAAQC,GAAR,CAAY,qCAAZ;AACMS,eAFgC,GAE1B,mBAAS,EAAEC,MAAM,KAAR,EAAT,CAF0B;AAAA;AAAA,mBAGhCD,IAAIE,IAAJ,EAHgC;;AAAA;AAAA;AAAA,mBAInB,eAAKK,OAAL,CAAa,EAAEF,KAAKL,IAAIK,GAAX,EAAb,CAJmB;;AAAA;AAIhCG,gBAJgC;;AAKtCnB,cAAEe,EAAF,CAAMI,KAAKP,IAAX,EAAiB,KAAjB,EAAwB,mCAAxB;;AALsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA","file":"read_test.js","sourcesContent":["import test from 'ava';\nimport mongoose from 'mongoose';\nimport User from '../../src/user';\nimport {\n  mongooseConnect,\n  mongooseDisconnect,\n} from '../test_helper';\n\n\ntest.before('connect to database', async (t) => {\n  console.log('read_test::connect to database');\n  await mongooseConnect('users_test');\n});\n\ntest.after.always('disconnect from database', async () => {\n  console.log('read_test::disconnect from database');\n  await mongooseDisconnect();\n});\n\ntest.beforeEach('drop users table', async (t) => {\n  console.log('read_test::drop users tablee');\n  await mongoose.connection.collections.users.drop();\n});\n\ntest.serial('query user via `find`', async (t) => {\n  console.log('read_test::query user via `find`');\n  const joe = new User({ name: 'Joe' });\n  await joe.save();\n\n  const users = await User.find({ name: 'Joe' });\n\n  t.is(\n    users[0]._id.toString(),\n    joe._id.toString(),\n    'the id of the created object is same as the one queried'\n  );\n\n});\n\ntest.serial('query user via `findOne`', async (t) => {\n  console.log('read_test::query user via `findOne`');\n  const joe = new User({ name: 'Joe' });\n  await joe.save();\n  const user = await User.findOne({ _id: joe._id });\n  t.is( user.name, 'Joe', 'Joe user should have the name Joe' )\n});\n\n"]}