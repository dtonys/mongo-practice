'use strict';

var _tapeAsync = require('tape-async');

var _tapeAsync2 = _interopRequireDefault(_tapeAsync);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _user = require('../src/user');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _tapeAsync2.default)('Deleting a user', async assert => {
  function createUser() {
    const user_1 = new _user2.default({
      name: 'newUser'
    });
    return user_1.save();
  }

  await _mongoose2.default.connection.collections.users.drop();

  let newUser = null;
  let queriedUser = null;

  assert.comment('model instance `remove`');
  newUser = await createUser();
  await newUser.remove();
  queriedUser = await _user2.default.findOne({ name: 'newUser' });
  assert.equals(queriedUser, null, 'user should be null after deleting it');

  assert.comment('class method `remove`');
  await createUser();
  await _user2.default.remove({ name: 'newUser' });
  queriedUser = await _user2.default.findOne({ name: 'newUser' });
  assert.equals(queriedUser, null, 'user should be null after deleting it');

  assert.comment('class method `findOneAndRemove`');
  await createUser();
  await _user2.default.findOneAndRemove({ name: 'newUser' });
  queriedUser = await _user2.default.findOne({ name: 'newUser' });
  assert.equals(queriedUser, null, 'user should be null after deleting it');

  assert.comment('class method `findByIdAndRemove`');
  newUser = await createUser();
  await _user2.default.findByIdAndRemove(newUser._id);
  queriedUser = await _user2.default.findOne({ name: 'newUser' });
  assert.equals(queriedUser, null, 'user should be null after deleting it');

  assert.true(true, 'true is truthy');
  assert.end();
});
//# sourceMappingURL=../node_modules/.cache/ava/8b0e4c9c02b0fcd5ce27011023d5ea11.js.map