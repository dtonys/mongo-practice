'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _test_helper = require('../test_helper');

var _user = require('../../src/user');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_ava2.default.before('connect to database', function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(t) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _test_helper.mongooseConnect)('users_test');

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava2.default.after.always('disconnect from database', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _test_helper.mongooseDisconnect)();

        case 2:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined);
})));

_ava2.default.beforeEach('drop test tables, create users', function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(t) {
    var alex, joe, maria, zach;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _test_helper.mongooseDropTestCollections)();

          case 2:
            alex = new _user2.default({ name: 'Alex' });
            joe = new _user2.default({ name: 'Joe' });
            maria = new _user2.default({ name: 'Maria' });
            zach = new _user2.default({ name: 'Zach' });

            t.context.alex = alex;
            t.context.joe = joe;
            t.context.maria = maria;
            t.context.zach = zach;
            _context3.next = 12;
            return Promise.all([alex.save(), joe.save(), maria.save(), zach.save()]);

          case 12:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}());

_ava2.default.serial('query user via `find`', function () {
  var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(t) {
    var joe, users;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            joe = t.context.joe;
            _context4.next = 3;
            return _user2.default.find({ name: 'Joe' });

          case 3:
            users = _context4.sent;


            t.is(users[0]._id.toString(), joe._id.toString(), 'the id of the created object is same as the one queried');

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}());

_ava2.default.serial('query user via `findOne`', function () {
  var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(t) {
    var joe, user;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            joe = t.context.joe;
            _context5.next = 3;
            return _user2.default.findOne({ _id: joe._id });

          case 3:
            user = _context5.sent;

            t.is(user.name, 'Joe', 'Joe user should have the name Joe');

          case 5:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}());

_ava2.default.serial('`skip` and `limit` the result set', function () {
  var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(t) {
    var allUsers;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _user2.default.find({}).skip(1).limit(2);

          case 2:
            allUsers = _context6.sent;

            t.is(allUsers[0].name, 'Joe', 'the correct first user was set based on the `skip` param');
            t.is(allUsers[1].name, 'Maria', 'the correct second user was set based on the `skip` param');
            t.is(allUsers.length, 2, 'the number of results matches the `limit` param');

          case 6:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  }));

  return function (_x5) {
    return _ref6.apply(this, arguments);
  };
}());
//# sourceMappingURL=../../node_modules/.cache/ava/9dbc11b43fb0591e223570ea8247d67d.js.map