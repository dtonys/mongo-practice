{"version":3,"sources":["association_test.js"],"names":["before","t","after","always","beforeEach","joe","name","blogPost","title","content","comment","blogPosts","push","comments","user","Promise","all","save","serial","findOne","populate","is","pass","path","console","log"],"mappings":"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","file":"association_test.js","sourcesContent":["import test from 'ava';\nimport mongoose from 'mongoose';\nimport {\n  mongooseConnect,\n  mongooseDisconnect,\n  mongooseDropTestCollections,\n} from '../test_helper';\nimport User from '../../src/user';\nimport Comment from '../../src/comment';\nimport BlogPost from '../../src/blogPost';\n\n\ntest.before('connect to database', async (t) => {\n  await mongooseConnect('users_test');\n});\n\ntest.after.always('disconnect from database', async () => {\n  await mongooseDisconnect();\n});\n\ntest.beforeEach('drop test tables and create associations', async (t) => {\n  await mongooseDropTestCollections();\n\n  // create associations\n  const joe = new User({\n    name: 'Joe',\n  });\n  const blogPost = new BlogPost({\n    title: 'test blogPost title',\n    content: 'test blogPost content',\n  });\n  const comment = new Comment({\n    content: 'test Comment content',\n  });\n\n  joe.blogPosts.push(blogPost);\n  blogPost.comments.push(comment);\n  comment.user = joe;\n\n  await Promise.all([\n    joe.save(),\n    blogPost.save(),\n    comment.save(),\n  ]);\n});\n\ntest.serial('get blogpost associated with joe', async (t) => {\n  const user = await User\n    .findOne({ name: 'Joe' })\n    .populate('blogPosts');\n  t.is(user.blogPosts[0].title, 'test blogPost title', 'loaded the associated blogpost via `populate`');\n  t.pass();\n});\n\ntest.serial('save a full relation graph', async (t) => {\n  const user = await User\n    .findOne({ name: 'Joe' })\n    .populate({\n      path: 'blogPosts',\n      populate: {\n        path: 'comments',\n        populate: {\n          path: 'user',\n        },\n      }\n    });\n\n  console.log('save a full relation graph passed');\n\n  t.is(\n    user.name,\n    'Joe',\n    'user\\'s name is correct'\n  );\n  t.is(\n    user.blogPosts[0].title,\n    'test blogPost title',\n    'correct blog post on user is populated'\n  );\n  t.is(\n    user.blogPosts[0].comments[0].content,\n    'test Comment content',\n    'correct comment on blog post is populated'\n  );\n  t.is(\n    user.blogPosts[0].comments[0].user.name,\n    'Joe',\n    'correct user on comment post is populated'\n  );\n  t.pass();\n});\n\n\n\n\n\n\n\n"]}