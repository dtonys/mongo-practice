'use strict';

var _tapeAsync = require('tape-async');

var _tapeAsync2 = _interopRequireDefault(_tapeAsync);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _user = require('../src/user');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _tapeAsync2.default)('Updating a user', async assert => {
  function createUser() {
    const user_1 = new _user2.default({
      name: 'newUser'
    });
    return user_1.save();
  }

  async function assertName() {
    allUsers = await _user2.default.find({});
    assert.equals(allUsers.length, 1, 'only one user exists in the database');
    assert.equals(allUsers[0].name, 'Alex', 'the user\'s name is the updated name');
    return true;
  }

  let newUser = null;
  let queriedUser = null;
  let allUsers = null;

  assert.comment('model instance via `update`');
  await _mongoose2.default.connection.collections.users.drop();
  newUser = await createUser();
  await newUser.update({ name: 'Alex' });
  await assertName();

  assert.comment('model instance `set` and `save`');
  await _mongoose2.default.connection.collections.users.drop();
  newUser = await createUser();
  newUser.set('name', 'Alex');
  await newUser.save();
  await assertName();

  assert.comment('model class `update`');
  await _mongoose2.default.connection.collections.users.drop();
  newUser = await createUser();
  await _user2.default.update({ name: 'newUser' }, { name: 'Alex' });
  await assertName();

  assert.comment('model class `findOneAndUpdate`');
  await _mongoose2.default.connection.collections.users.drop();
  newUser = await createUser();
  await _user2.default.findOneAndUpdate({ name: 'newUser' }, { name: 'Alex' });
  await assertName();

  assert.comment('model class `findByIdAndUpdate`');
  await _mongoose2.default.connection.collections.users.drop();
  newUser = await createUser();
  await _user2.default.findByIdAndUpdate(newUser._id, { name: 'Alex' });
  await assertName();

  assert.true(true, 'true is truthy');
  assert.end();
});
//# sourceMappingURL=../node_modules/.cache/ava/87f9580f6be8b478a1b47f76523fa358.js.map