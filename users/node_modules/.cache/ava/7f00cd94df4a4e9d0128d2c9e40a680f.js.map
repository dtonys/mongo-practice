{"version":3,"sources":["middleware_test.js"],"names":["before","t","after","always","beforeEach","joe","name","blogPost","title","content","blogPosts","push","context","Promise","all","save","serial","remove","count","blogPostCount","is","pass"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAMA,cAAKA,MAAL,CAAY,qBAAZ;AAAA,uDAAmC,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3B,kCAAgB,YAAhB,CAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAIA,cAAKC,KAAL,CAAWC,MAAX,CAAkB,0BAAlB,4CAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACtC,sCADsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9C;;AAIA,cAAKC,UAAL,CAAgB,0CAAhB;AAAA,wDAA4D,kBAAOH,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpD,8CADoD;;AAAA;;AAG1D;AACMI,eAJoD,GAI9C,mBAAS;AACnBC,oBAAM;AADa,aAAT,CAJ8C;AAOpDC,oBAPoD,GAOzC,uBAAa;AAC5BC,qBAAO,qBADqB;AAE5BC,uBAAS;AAFmB,aAAb,CAPyC;;;AAY1DJ,gBAAIK,SAAJ,CAAcC,IAAd,CAAmBJ,QAAnB;;AAEAN,cAAEW,OAAF,CAAUP,GAAV,GAAgBA,GAAhB;AACAJ,cAAEW,OAAF,CAAUL,QAAV,GAAqBA,QAArB;;AAf0D;AAAA,mBAiBpDM,QAAQC,GAAR,CAAY,CAChBT,IAAIU,IAAJ,EADgB,EAEhBR,SAASQ,IAAT,EAFgB,CAAZ,CAjBoD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5D;;AAAA;AAAA;AAAA;AAAA;;AAwBA,cAAKC,MAAL,CAAY,wDAAZ;AAAA,wDAAsE,kBAAOf,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5DI,eAD4D,GACpDJ,EAAEW,OADkD,CAC5DP,GAD4D;AAAA;AAAA,mBAE9DA,IAAIY,MAAJ,EAF8D;;AAAA;AAAA;AAAA,mBAGxC,mBAASC,KAAT,EAHwC;;AAAA;AAG9DC,yBAH8D;;;AAKpElB,cAAEmB,EAAF,CAAMD,aAAN,EAAqB,CAArB,EAAwB,8DAAxB;AACAlB,cAAEoB,IAAF;;AANoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtE;;AAAA;AAAA;AAAA;AAAA","file":"middleware_test.js","sourcesContent":["import test from 'ava';\nimport mongoose from 'mongoose';\nimport User from '../../src/user';\nimport BlogPost from '../../src/blogPost';\n\nimport {\n  mongooseConnect,\n  mongooseDisconnect,\n  mongooseDropTestCollection,\n} from '../test_helper';\n\ntest.before('connect to database', async (t) => {\n  await mongooseConnect('users_test');\n});\n\ntest.after.always('disconnect from database', async () => {\n  await mongooseDisconnect();\n});\n\ntest.beforeEach('drop test tables and create associations', async (t) => {\n  await mongooseDropTestCollection();\n\n  // create associations\n  const joe = new User({\n    name: 'Joe',\n  });\n  const blogPost = new BlogPost({\n    title: 'test blogPost title',\n    content: 'test blogPost content',\n  });\n\n  joe.blogPosts.push(blogPost);\n\n  t.context.joe = joe;\n  t.context.blogPost = blogPost;\n\n  await Promise.all([\n    joe.save(),\n    blogPost.save(),\n  ]);\n});\n\n\ntest.serial('Removes all blogposts on a user when a user is removed', async (t) => {\n  const { joe } = t.context;\n  await joe.remove();\n  const blogPostCount = await BlogPost.count();\n\n  t.is( blogPostCount, 0, 'all blog posts are removed via the user\\'s pre `remove` hook' );\n  t.pass();\n});\n"]}