'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _user = require('../../src/user');

var _user2 = _interopRequireDefault(_user);

var _blogPost = require('../../src/blogPost');

var _blogPost2 = _interopRequireDefault(_blogPost);

var _test_helper = require('../test_helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_ava2.default.before('connect to database', function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(t) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _test_helper.mongooseConnect)('users_test');

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava2.default.after.always('disconnect from database', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _test_helper.mongooseDisconnect)();

        case 2:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined);
})));

_ava2.default.beforeEach('drop test tables and create associations', function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(t) {
    var joe, blogPost;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _test_helper.mongooseDropTestCollection)();

          case 2:

            // create associations
            joe = new _user2.default({
              name: 'Joe'
            });
            blogPost = new _blogPost2.default({
              title: 'test blogPost title',
              content: 'test blogPost content'
            });


            joe.blogPosts.push(blogPost);

            t.context.joe = joe;
            t.context.blogPost = blogPost;

            _context3.next = 9;
            return Promise.all([joe.save(), blogPost.save()]);

          case 9:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}());

_ava2.default.serial('Removes all blogposts on a user when a user is removed', function (t) {

  t.pass();
});
//# sourceMappingURL=../../node_modules/.cache/ava/a9e08a11de628da68d1f88b8301fcafe.js.map