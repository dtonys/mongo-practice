{"version":3,"sources":["read_test.js"],"names":["before","t","start","beforeEach","db","context","User","models","connection","collections","users","drop","NEW_USER_NAME","joe","name","save","find","is","_id","toString","findOne","user"],"mappings":";;AAAA;;;;AACA;;AAEA;;;;;;AAIA,cAAKA,MAAL,CAAY,cAAZ;AAAA,uDAA4B,iBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpB,wBAAcC,KAAd,EADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AAIA,cAAKC,UAAL,CAAgB,4BAAhB;AAAA,wDAA8C,kBAAOF,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3B,kCAD2B;;AAAA;AACtCG,cADsC;;AAE5CH,cAAEI,OAAF,CAAUD,EAAV,GAAeA,EAAf;;AAF4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AAKA,mBAAK,qCAAL;AAAA,wDAA4C,kBAAOH,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClCG,cADkC,GAC3BH,EAAEI,OADyB,CAClCD,EADkC;AAEpCE,gBAFoC,GAE7BF,GAAGG,MAAH,CAAU,MAAV,CAF6B;AAAA;AAAA,mBAIpCH,GAAGI,UAAH,CAAcC,WAAd,CAA0BC,KAA1B,CAAgCC,IAAhC,EAJoC;;AAAA;AAMpCC,yBANoC,GAMpB,KANoB;AAOpCC,eAPoC,GAO9B,IAAIP,IAAJ,CAAS,EAAEQ,MAAMF,aAAR,EAAT,CAP8B;AAAA;AAAA,mBAQpCC,IAAIE,IAAJ,EARoC;;AAAA;AAAA;AAAA,mBAStBT,KAAKU,IAAL,CAAU,EAAEF,MAAMF,aAAR,EAAV,CATsB;;AAAA;AASpCF,iBAToC;;;AAW1CT,cAAEgB,EAAF,CACEP,MAAM,CAAN,EAASQ,GAAT,CAAaC,QAAb,EADF,EAEEN,IAAIK,GAAJ,CAAQC,QAAR,EAFF,EAGE,yDAHF;;AAX0C;AAAA,mBAiBvBb,KAAKc,OAAL,CAAa,EAAEF,KAAKL,IAAIK,GAAX,EAAb,CAjBuB;;AAAA;AAiBpCG,gBAjBoC;;AAkB1CpB,cAAEgB,EAAF,CAAKI,KAAKP,IAAV,EAAgBF,aAAhB,EAA+B,2DAA/B;;AAlB0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;;AAAA;AAAA;AAAA;AAAA","file":"read_test.js","sourcesContent":["import test from 'ava';\nimport { MongoDBServer } from 'mongomem';\n\nimport {\n  createMongoose\n} from '../test_helper';\n\ntest.before('start server', async t => {\n  await MongoDBServer.start();\n})\n\ntest.beforeEach('create mongoose connection', async (t) => {\n  const db = await createMongoose();\n  t.context.db = db;\n});\n\ntest('query user via `find` and `findOne`', async (t) => {\n  const { db } = t.context;\n  const User = db.models['user'];\n\n  await db.connection.collections.users.drop();\n\n  const NEW_USER_NAME = 'Joe';\n  const joe = new User({ name: NEW_USER_NAME });\n  await joe.save();\n  const users = await User.find({ name: NEW_USER_NAME });\n\n  t.is(\n    users[0]._id.toString(),\n    joe._id.toString(),\n    'the id of the created object is same as the queried one'\n  );\n\n  const user = await User.findOne({ _id: joe._id });\n  t.is(user.name, NEW_USER_NAME, 'the name of the created object is same as the queried one');\n\n});\n\n"]}