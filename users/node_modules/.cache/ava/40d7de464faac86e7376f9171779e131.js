'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _user = require('../../src/user');

var _user2 = _interopRequireDefault(_user);

var _test_helper = require('../test_helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_ava2.default.before('connect to database', function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(t) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _test_helper.mongooseConnect)('users_test');

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava2.default.after.always('disconnect from database', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _test_helper.mongooseDisconnect)();

        case 2:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined);
})));

_ava2.default.beforeEach('drop test tables', _test_helper.mongooseDropTestTables);

_ava2.default.serial('Creating subdocuments', function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(t) {
    var joe, queriedUser;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            joe = new _user2.default({
              name: 'Joe',
              posts: [{ title: 'post_title' }]
            });
            _context3.next = 3;
            return joe.save();

          case 3:
            _context3.next = 5;
            return _user2.default.findOne({ name: 'Joe' });

          case 5:
            queriedUser = _context3.sent;

            t.is(queriedUser.posts[0].title, 'post_title', 'queriedUser was created with a post subdocument');

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}());

_ava2.default.serial('Adding subdocuments to existing record', function () {
  var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(t) {
    var joe, queriedUser, queriedUserUpdated;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            joe = new _user2.default({
              name: 'Joe',
              posts: []
            });
            _context4.next = 3;
            return joe.save();

          case 3:
            _context4.next = 5;
            return _user2.default.findOne({ name: 'Joe' });

          case 5:
            queriedUser = _context4.sent;

            queriedUser.posts.push({ title: 'New Post' });
            _context4.next = 9;
            return queriedUser.save();

          case 9:
            _context4.next = 11;
            return _user2.default.findOne({ name: 'Joe' });

          case 11:
            queriedUserUpdated = _context4.sent;

            t.is(queriedUserUpdated.posts[0].title, 'New Post', 'queriedUser was updated with an added post');

          case 13:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}());

_ava2.default.serial('Removing subdocuments from existing record', function () {
  var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(t) {
    var joe, queriedUser, postToRemove, queriedUserUpdated;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            joe = new _user2.default({
              name: 'Joe',
              posts: [{ title: 'New Title' }]
            });
            _context5.next = 3;
            return joe.save();

          case 3:
            _context5.next = 5;
            return _user2.default.findOne({ name: 'Joe' });

          case 5:
            queriedUser = _context5.sent;
            postToRemove = queriedUser.posts[0];

            postToRemove.remove();
            _context5.next = 10;
            return queriedUser.save();

          case 10:
            _context5.next = 12;
            return _user2.default.findOne({ name: 'Joe' });

          case 12:
            queriedUserUpdated = _context5.sent;

            console.log('queriedUserUpdated');
            console.log(queriedUserUpdated);
            t.is(queriedUserUpdated.posts.length, 0, 'queriedUser was updated with a removed post');

          case 16:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}());
//# sourceMappingURL=../../node_modules/.cache/ava/40d7de464faac86e7376f9171779e131.js.map