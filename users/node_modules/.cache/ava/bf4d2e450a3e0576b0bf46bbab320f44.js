'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _test_helper = require('../test_helper');

var _user = require('../../src/user');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_ava2.default.before('connect to database', function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(t) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _test_helper.mongooseConnect)('users_test');

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava2.default.after.always('disconnect from database', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _test_helper.mongooseDisconnect)();

        case 2:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined);
})));

_ava2.default.serial('Make user name required', function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(t) {
    var user, validationResult, message;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            user = new _user2.default({ name: undefined });
            validationResult = user.validateSync();
            message = validationResult.errors.name.message;

            t.is(message, 'Name is required.', 'A `Name is required` error message should appear');

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}());

_ava2.default.serial('Requires user name to be longer than 2 chars', function () {
  var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(t) {
    var user, validationResult, message;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            user = new _user2.default({ name: 'Al' });
            validationResult = user.validateSync();
            message = validationResult.errors.name.message;

            t.is(message, 'Name must be longer than 2 characters.', 'A `Name must be longer than 2 characters.` error message should appear');

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}());

_ava2.default.serial('disallows invalid records from being saved', function () {
  var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(t) {
    var user, message;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            user = new _user2.default({ name: 'Al' });
            _context5.prev = 1;
            _context5.next = 4;
            return user.save();

          case 4:
            _context5.next = 10;
            break;

          case 6:
            _context5.prev = 6;
            _context5.t0 = _context5['catch'](1);
            message = _context5.t0.errors.name.message;

            t.is(message, 'Name must be longer than 2 characters.', 'A `Name must be longer than 2 characters.` error message should appear');

          case 10:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined, [[1, 6]]);
  }));

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}());
//# sourceMappingURL=../../node_modules/.cache/ava/bf4d2e450a3e0576b0bf46bbab320f44.js.map