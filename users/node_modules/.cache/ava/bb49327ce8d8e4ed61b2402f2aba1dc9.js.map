{"version":3,"sources":["update_test.js"],"names":["t","find","allUsers","is","length","name","assertName","createUser","user_1","postCount","save","before","after","always","beforeEach","connection","collections","users","drop","serial","newUser","update","set","findOneAndUpdate","findByIdAndUpdate","_id","$inc","findOne","user"],"mappings":"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","file":"update_test.js","sourcesContent":["import test from 'ava';\nimport mongoose from 'mongoose';\nimport User from '../../src/user';\nimport {\n  mongooseConnect,\n  mongooseDisconnect,\n} from '../test_helper';\n\nfunction createUser() {\n  const user_1 = new User({\n    name: 'newUser',\n    postCount: 0,\n  });\n  return user_1.save();\n}\n\nasync function assertName(t) {\n  const allUsers = await User.find({});\n  t.is(allUsers.length, 1, 'only one user exists in the database');\n  t.is(allUsers[0].name, 'Alex', 'the user\\'s name is the updated name');\n  return true;\n}\n\ntest.before('connect to database', async (t) => {\n  await mongooseConnect('users_test');\n});\n\ntest.after.always('disconnect from database', async () => {\n  await mongooseDisconnect();\n});\n\ntest.beforeEach('drop users table', async (t) => {\n  try {\n    await mongoose.connection.collections.users.drop();\n  }\n  catch (err) {\n    // IGNORE EXCEPTION\n  }\n});\n\n\ntest.serial('model instance `update`', async (t) => {\n  const newUser = await createUser();\n  await newUser.update({ name: 'Alex' });\n  await assertName(t);\n});\n\ntest.serial('model instance `set` and `save` ', async (t) => {\n  const newUser = await createUser();\n  newUser.set('name', 'Alex');\n  await newUser.save();\n  await assertName(t);\n});\n\ntest.serial('model class `update` ', async (t) => {\n  const newUser = await createUser();\n  await User.update({ name: 'newUser' }, { name: 'Alex' });\n  await assertName(t);\n});\n\ntest.serial('model class `findOneAndUpdate` ', async (t) => {\n  const newUser = await createUser();\n  await User.findOneAndUpdate({ name: 'newUser' }, { name: 'Alex' });\n  await assertName(t);\n});\n\ntest.serial('model class `findByIdAndUpdate` ', async (t) => {\n  const newUser = await createUser();\n  await User.findByIdAndUpdate(newUser._id, { name: 'Alex' });\n  await assertName(t);\n});\n\ntest.serial('a user can have their postcount incremented by 1 ', async (t) => {\n  const newUser = await createUser();\n  await User.update({ name: 'newUser' }, { $inc: { postCount: 1 } });\n  const user = await User.findOne({ name: 'newUser' });\n  t.is( user.postCount, 10, 'Postcount was incremented by one' );\n});\n\n\n"]}